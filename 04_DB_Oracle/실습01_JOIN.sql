-- 1. 직급이 대리이면서 ASIA 지역에서 근무하는 직원들의 사번, 직원명, 직급명, 부서명, 근무지역, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
WHERE JOB_NAME = '대리' AND LOCAL_NAME LIKE '%ASIA%';
-- 2. 70년대생 이면서 여자이고, 성이 전씨인 직원들의 직원명, 주민번호, 부서명, 직급명 조회
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
WHERE SUBSTR(EMP_NO, 1, 1) = 7 AND SUBSTR(EMP_NO, 8, 1) = 2 AND EMP_NAME LIKE '전%'; -- 70년대생이면서 여자: WHERE EMP_NO LIKE '7_____-2%'
-- 3. 보너스를 받는 직원들의 직원명, 보너스, 연봉, 부서명, 근무지역 조회 (단, 부서 배치 안된 사원들도 출력)
SELECT EMP_NAME, BONUS, TO_CHAR(SALARY * 12, '999,999,999') 연봉, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    LEFT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;
-- 4. 각 부서별 평균 급여를 조회하여 부서명, 평균 급여 조회 (단, 부서 배치 안된 사원들의 평균도 같이)
SELECT NVL(DEPT_TITLE, '부서 없음') 부서, ROUND(AVG(NVL(SALARY, 0)), 0) 평균급여
FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
GROUP BY DEPT_TITLE;
-- 5. 각 부서별 총 급여의 합이 1000만원 이상인 부서명, 급여의 합 조회
SELECT DEPT_TITLE, TO_CHAR(SUM(SALARY), '999,999,999') 급여의합
FROM EMPLOYEE
    JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) >= 10000000;
-- 6. 사번, 직원명, 직급명, 급여 등급, 구분 조회
-- 이때 구분은 급여 등급이 S1, S2인 경우 '고급', S3, S4인 경우 '중급', S5, S6인 경우 '초급'
SELECT * FROM NATIONAL;
SELECT * FROM LOCATION;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM SAL_GRADE;

SELECT EMP_ID, EMP_NAME, JOB_NAME, SAL_LEVEL 급여등급, 
    CASE 
        WHEN SAL_LEVEL IN ('S1', 'S2') THEN '고급' 
        WHEN SAL_LEVEL IN ('S3', 'S4') THEN '중급' 
        WHEN SAL_LEVEL IN ('S5', 'S6') THEN '초급' 
    END 구분
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);
-- 7. 보너스를 받지 않는 직원들 중 직급 코드가 J4 또는 J7인 직원들의 직원명, 직급명, 급여 조회
SELECT EMP_NAME, JOB_NAME, SALARY, JOB_CODE 확인용컬럼
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
WHERE BONUS IS NULL AND JOB_CODE IN ('J4', 'J7');
-- 8. 부서가 있는 직원들의 직원명, 직급명, 부서명, 근무 지역 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);
-- 9. 해외영업팀에 근무하는 직원들의 직원명, 직급명, 부서코드, 부서명 조회
SELECT * FROM NATIONAL;
SELECT * FROM LOCATION;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM SAL_GRADE;

SELECT EMP_NAME, JOB_NAME, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE DEPT_TITLE LIKE '%해외영업%';
-- 10. 이름에 '형'자가 들어있는 직원들의 사번, 직원명, 직급명 조회
-- 테이블 : USER_INFO, REVIEW, MOVIE, ACTOR, MOVIE_ACTOR
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
    LEFT JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';
-- 11. 영화 제목, 감독, 출연한 배우 조회
SELECT * FROM USER_INFO;
SELECT * FROM REVIEW;
SELECT * FROM MOVIE;
SELECT * FROM ACTOR;
SELECT * FROM MOVIE_ACTOR;

SELECT TITLE, DIRECTOR, NAME
FROM MOVIE
    JOIN ACTOR ON (MOVIE_ID = ACTOR_ID);
-- 12. 평점이 3점 이상인 리뷰 영화 제목과 이름, 평점 조회
SELECT TITLE, AVG(NVL(RATING,0)) 평균평점
FROM MOVIE
    JOIN REVIEW USING(MOVIE_ID)
WHERE RATING >= 3
GROUP BY TITLE;
-- 13. 사용자별 리뷰 수 조회
SELECT NAME, COUNT(USER_ID) 리뷰수
FROM NAME
    JOIN NAME USING(MOVIE_ID)
GROUP BY USER_ID NAME
ORDER BY NAME;
-- 14. 봉준호 감독의 영화에 출연한 배우 조회
SELECT NAME
FROM MOVIE
    JOIN MOVIE_ACTOR USING(MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
WHERE DIRECTOR = '최동훈'
GROUP BY NAME;
-- 15. 하정우가 출연한 영화 제목과 평균 평점 조회
SELECT * FROM USER_INFO;
SELECT * FROM REVIEW;
SELECT * FROM MOVIE;
SELECT * FROM ACTOR;
SELECT * FROM MOVIE_ACTOR;

SELECT TITLE, AVG(NVL(RATING, 0)) 평균평점
FROM MOVIE
    JOIN MOVIE_ACTOR USING(MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
    JOIN REVIEW USING(MOVIE_ID)
WHERE NAME = '하정우'
GROUP BY TITLE;
-- 16. MBTI별 평균 평점 조회
SELECT MBTI, ROUND(AVG(NVL(RATING, 0)), 0) 평균평점
FROM USER_INFO
    LEFT JOIN REVIEW USING(USER_ID)
WHERE MBTI IS NOT NULL
GROUP BY MBTI;
-- 17. 각 영화별 리뷰 수와 평균 평점 조회 (리뷰 수가 1건이라도 있는 경우부터)
SELECT * FROM USER_INFO;
SELECT * FROM REVIEW;
SELECT * FROM MOVIE;
SELECT * FROM ACTOR;
SELECT * FROM MOVIE_ACTOR;

SELECT TITLE ,COUNT(RATING) 리뷰수, AVG(NVL(RATING, 0)) 평균평점
FROM MOVIE
    JOIN REVIEW USING(MOVIE_ID)
GROUP BY TITLE;
-- 18. 각 배우가 출연한 영화 수 조회 (단, 3편 이상인 배우만)
SELECT NAME, COUNT(TITLE) "출연한 영화 수"
FROM MOVIE
    JOIN MOVIE_ACTOR USING(MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
GROUP BY NAME
HAVING COUNT(TITLE) >= 3;